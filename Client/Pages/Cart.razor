@page "/cart"
@inject ICartService CartSerive

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if(cartProducts == null || cartProducts.Count == 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br/>
                    <input type="number" value="@product.Quantity"
                    @onchange="@((ChangeEventArgs e ) => UpdateQuentity(e, product))"
                    calss="form-control input-quantity"
                    miin="1"/>
                    <button class="btn-delete" @onclick="@(() =>
                        RemoveProductFromCart(product.ProductId, product.ProductTypeId))">
                        Delete
                    </button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count): $@cartProducts.Sum(product => @product.Price * product.Quantity) 
        </div>
    </div>
}

@code {
    List<CartProductResponseDto> cartProducts = null;
    string message = "Loading cart...";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveProductFromCart(int productId, int productTypeId)
    {
        await CartSerive.RemoveProductFromCart(productId, productTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        if ((await CartSerive.GetCartItem()).Count == 0)
        {
            message = "Your cart is empty";
            cartProducts = new List<CartProductResponseDto>();
        }
        else
        {
            cartProducts = await CartSerive.GetCartProducts();
        }
    }

    private async Task UpdateQuentity(ChangeEventArgs e, CartProductResponseDto product)
    {
        product.Quantity = int.Parse(e.Value.ToString());
        if (product.Quantity < 1)
            product.Quantity = 1;
            await CartSerive.UpdateQuantity(product);
    }
}
